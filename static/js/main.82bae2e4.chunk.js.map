{"version":3,"sources":["Component/Const/ConstSeriesData.js","Component/CardData/CardData.js","Component/Card/Card.js","Component/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ConstSeriesData","sname","imgSrc","title","links","CardData","props","className","src","alt","seriesTitle","seriesName","href","seriesLinks","target","Card","map","seriesData","index","key","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAqCeA,G,KArCS,CAAC,CACrBC,MAAO,OACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,6CAEX,CACIH,MAAO,cACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,6CAEX,CACIH,MAAO,UACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,6CAEX,CACIH,MAAO,OACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,6CAEX,CACIH,MAAO,WACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,6CAEX,CACIH,MAAO,OACPC,OAAQ,6CACRC,MAAO,uBACPC,MAAO,+CCbIC,EAnBE,SAACC,GACd,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKF,EAAMJ,OAAQO,IAAI,SAASF,UAAU,iBAC/C,yBAAKA,UAAU,aACX,0BAAMA,UAAU,cAAcD,EAAMI,aACpC,wBAAIH,UAAU,aAAaD,EAAMK,YACjC,uBAAGJ,UAAU,kBAAkBK,KAAMN,EAAMO,YAAaC,OAAO,UAA/D,kBCcTC,G,KApBF,WACT,OACA,6BACA,wBAAIR,UAAU,aAAY,gEACtB,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACVP,EAAgBgB,KAAI,SAACC,EAAYC,GAClC,OACI,kBAAC,EAAD,CAAUC,IAAKD,EAAOhB,OAAQe,EAAWf,OACzCQ,YAAaO,EAAWd,MACxBQ,WAAYM,EAAWhB,MACvBY,YAAaI,EAAWb,gBC2B7BgB,G,MAxCA,WACX,OACA,yBAAKb,UAAU,aACX,yBAAKA,UAAU,yDACf,uBAAGA,UAAU,eAAeK,KAAK,KAAjC,sBACA,4BAAQL,UAAU,iBAAiBc,KAAK,SAASC,cAAY,WAAWC,cAAY,yBAAyBC,gBAAc,wBAAwBC,gBAAc,QAAQC,aAAW,qBAChL,0BAAMnB,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BoB,GAAG,yBACzC,wBAAIpB,UAAU,sBACd,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,QAAsC,0BAAML,UAAU,WAAhB,eAE1C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWK,KAAK,KAA7B,SAEJ,wBAAIL,UAAU,YACV,uBAAGA,UAAU,oBAAoBK,KAAK,KAAtC,cAWJ,0BAAML,UAAU,4BAChB,2BAAOA,UAAU,uBAAuBc,KAAK,OAAOO,YAAY,SAASF,aAAW,WACpF,4BAAQnB,UAAU,uCAAuCc,KAAK,UAA9D,gB,MCnBGQ,MAVf,WAEE,OACE,yBAAKtB,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82bae2e4.chunk.js","sourcesContent":["const ConstSeriesData = [{\r\n    sname: \"DARK\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp4056399.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/80100172\"\r\n},\r\n{\r\n    sname: \"The Witcher\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp6902843.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/80189685\"\r\n},\r\n{\r\n    sname: \"Step Up\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp1911833.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/70050484\"\r\n},\r\n{\r\n    sname: \"TROY\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp2050733.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/60034571\"\r\n},\r\n{\r\n    sname: \"SHERLOCK\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp2032047.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/70202589\"\r\n},\r\n{\r\n    sname: \"TROY\",\r\n    imgSrc: \"https://wallpapercave.com/wp/wp2050733.jpg\",\r\n    title: \"Pandora Prime Series\",\r\n    links: \"https://www.netflix.com/in/title/60034571\"\r\n}];\r\n\r\nexport default ConstSeriesData;","import React from 'react';\r\n\r\nconst CardData = (props) => {\r\n    return(\r\n        <div className=\"col-md-4 box-shadow-hover\">\r\n            <div className=\"card-group\">\r\n                <div className=\"card\">          \r\n                    <img src={props.imgSrc} alt=\"my_pic\" className=\"card-img-top\"/>\r\n                    <div className=\"card-body\">\r\n                        <span className=\"card-title\">{props.seriesTitle}</span>\r\n                        <h3 className=\"card-text\">{props.seriesName}</h3>\r\n                        <a className=\"btn btn-primary\" href={props.seriesLinks} target=\"_blank\">\r\n                        Watch Now\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardData;","import React from 'react';\r\nimport ConstSeriesData from '../Const/ConstSeriesData';\r\nimport CardData from '../CardData/CardData';\r\nimport './Card.css';\r\n\r\nconst Card = () => {\r\n    return(\r\n    <div>\r\n    <h3 className=\"card-text\"><b>List of top 5 Pandora Web Series</b></h3>\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {ConstSeriesData.map((seriesData, index) => {\r\n                return(\r\n                    <CardData key={index} imgSrc={seriesData.imgSrc} \r\n                    seriesTitle={seriesData.title} \r\n                    seriesName={seriesData.sname}\r\n                    seriesLinks={seriesData.links}/>\r\n                ) \r\n                })}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n    return(\r\n    <div className=\"container\">\r\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n        <a className=\"navbar-brand\" href=\"#\">Pandora Web Series</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">Link</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\" href=\"#\">Disabled</a>\r\n            </li>\r\n            {/* <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdown01\">\r\n                <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n                </div>\r\n            </li> */}\r\n            </ul>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n            <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n        </div>\r\n        </nav>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Card from './Component/Card/Card';\nimport Navbar from './Component/Navbar/Navbar';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <Navbar/>\n      <Card/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}